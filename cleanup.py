# cleanup.py - ضعه في الجذر مؤقتاً
"""
سكريبت تنظيف الملفات المكررة والقديمة
"""
import os
import shutil
from pathlib import Path

def main():
    """تنظيف الملفات المكررة"""
    
    print("🧹 بدء عملية التنظيف...")
    
    # 1. إنشاء مجلد scripts إذا لم يكن موجوداً
    os.makedirs("scripts", exist_ok=True)
    print("📁 تم إنشاء مجلد scripts")
    
    # 2. إنشاء مجلدات app إذا لم تكن موجودة
    app_folders = [
        "app",
        "app/models", 
        "app/schemas",
        "app/routers",
        "app/services",
        "app/utils"
    ]
    
    for folder in app_folders:
        os.makedirs(folder, exist_ok=True)
        print(f"📁 تم إنشاء مجلد: {folder}")
    
    # 3. إنشاء ملفات __init__.py الفارغة
    init_files = [
        "app/__init__.py",
        "app/models/__init__.py", 
        "app/schemas/__init__.py",
        "app/routers/__init__.py",
        "app/services/__init__.py",
        "app/utils/__init__.py"
    ]
    
    for init_file in init_files:
        if not os.path.exists(init_file):
            with open(init_file, 'w') as f:
                f.write("# Generated by cleanup script\n")
            print(f"📄 تم إنشاء: {init_file}")
    
    # 4. نقل الملفات الموجودة إلى أماكنها الصحيحة
    file_moves = []
    
    # فحص الملفات الموجودة ونقلها
    if os.path.exists("init_db.py"):
        file_moves.append(("init_db.py", "scripts/init_db.py"))
    
    if os.path.exists("reset_db.py"):
        file_moves.append(("reset_db.py", "scripts/reset_db.py"))
        
    if os.path.exists("migrate.py"):
        file_moves.append(("migrate.py", "scripts/migrate.py"))
        
    if os.path.exists("reset_users.py"):
        file_moves.append(("reset_users.py", "scripts/reset_users.py"))
    
    # تنفيذ النقل
    for src, dst in file_moves:
        try:
            shutil.move(src, dst)
            print(f"📦 تم نقل: {src} → {dst}")
        except Exception as e:
            print(f"❌ خطأ في نقل {src}: {e}")
    
    # 5. حذف الملفات المكررة إذا وجدت
    files_to_check = ["models.py", "schemas.py", "utils.py"]
    
    for file_path in files_to_check:
        if os.path.exists(file_path):
            # إنشاء نسخة احتياطية أولاً
            backup_name = f"{file_path}.backup"
            shutil.copy2(file_path, backup_name)
            print(f"💾 تم إنشاء نسخة احتياطية: {backup_name}")
            
            # حذف الملف الأصلي
            os.remove(file_path)
            print(f"🗑️ تم حذف: {file_path}")
    
    print("\n✅ انتهت عملية التنظيف الأولية!")
    print("\n📋 الخطوات التالية:")
    print("1. انسخ الملفات الجديدة من الـ artifacts")
    print("2. قم بإعداد ملف .env")
    print("3. شغل: python scripts/init_db.py")
    
    # 6. إنشاء ملف .env مثال إذا لم يكن موجوداً
    if not os.path.exists(".env") and not os.path.exists(".env.example"):
        env_content = """# إعدادات أساسية
SECRET_KEY=your-super-secret-key-here
DATABASE_URL=sqlite:///./app.db
DEBUG=True

# Google OAuth
GOOGLE_CLIENT_ID=your-google-client-id
GOOGLE_CLIENT_SECRET=your-google-client-secret

# Salla API
SALLA_CLIENT_ID=your-salla-client-id
SALLA_CLIENT_SECRET=your-salla-client-secret

# OpenAI
OPENAI_API_KEY=your-openai-api-key

# DataForSEO
DATAFORSEO_LOGIN=your-dataforseo-login
DATAFORSEO_PASSWORD=your-dataforseo-password

# Frontend URL
FRONTEND_URL=http://localhost:3000
"""
        with open(".env.example", 'w', encoding='utf-8') as f:
            f.write(env_content)
        print("📄 تم إنشاء .env.example")

if __name__ == "__main__":
    main()